1 + 4
3 * 3
3 ^ 1
3 ** 3
3 ** 2
pi
"pi"
'pi'
letters
LETTERS
str(letters)
# str means structure
# help can be requested a ?functionname
?str
TRUE
T <- FALSE
T
rm(T)
T
# <- assignment operator
# x = 4 can be used too
x = 4
x
x <- 4
# we shouldn't use '=' as an assignment operator
x *2
x ** y
x ** x
?sqrt
sqrt(x)
hist(runif(1e5))
?hist
?runif
x <- 1:20
sin(x)
plot(x, sin(x))
?plot
plot(x, sin(x), type = '1')
plot(x, sin(x), type = "1")
plot(x, sin(x), type = "l")
?seq
?plot
?seq
x <- seq(from = 0, to = 20, by = 0.01)
plot(x, sin(x), type = "l")
x <- seq(from = 1, to = 20, by = 0.01)
plot(x, sin(x), type = "l")
?pie
pie(c(Sky = 78, "Sunny side of pyramid" = 17, "Shady side of pyramid" = 5),
init.angle = 315, col = c("deepskyblue", "yellow", "yellow3"), border = FALSE)
x <- seq(from = 0, to = 20, by = 0.01)
plot(x, sin(x), type = "l")
?curve
curve(sin, from = 0, to = 20)
?curve
curve(sin, from = 0, to = 20)
curve(sin, from = 0, to = pi ** 2)
curve(sin, from = 0, to = pi * 2)
curve(con, from = 0, to = pi * 2, add = TRUE, col = 'red')
curve(sin, from = 0, to = pi * 2)
curve(con, from = 0, to = pi * 2, add = TRUE, col = 'red')
curve(cos, from = 0, to = pi * 2, add = TRUE, col = 'red')
## TODO 100 iterations
?help
## TODO 100 iterations
?iterations
## TODO 100 iterations
?map
## TODO 100 iterations
?for
## TODO 100 iterations
?for
?for
# after the for we have to provide the seq and and the expression
# after the for we have to provide the seq and and the expression
# we don't need to add a space after for but we do: for (
## TODO 100 iterations
for (i in 1:100)
increase x a 100 times
for (i in 1:100) {
if (runif(1)) {
x <- x + 1
} else {
x <- x-1
}
}
# TODO Brownian motion / random walk
x <- 0
## TODO 100 iterations
for (i in 1:100) {
if (runif(1) < 0.5) {
x <- x + 1
} else {
x <- x-1
}
}
# TODO Brownian motion / random walk
x <- 0
## TODO 100 iterations
for (i in 1:100) {
if (runif(1) < 0.5) {
x <- x + 1
} else {
x <- x-1
}
}
x
# TODO Brownian motion / random walk
x <- 0
## TODO 100 iterations
for (i in 1:100) {
if (runif(1) < 0.5) {
x <- x + 1
} else {
x <- x-1
}
}
x
# We are running the code again and again so we can see that it produces random values for x
x
## vectorize
runif(100)
runif(1) < 0.5
runif(100) < 0.5
?ifelse
mes back as a boolean
comes back as a boolean
we insert runif(100) < 0.5 it comes back as a boolean
cumsum(round(runif(100)))
# cumsum is cumulative sum, adding up all the sum values of the vectors
round(runif(100))
## round(runif(100)) generates the 0s and 1s
cumsum(round(runif(100)) * 2 -1)
cumsum(round(runif(100)) * 2 -1)
cumsum(round(runif(100)) * 2 -1)
cumsum(round(runif(100)) * 2 -1)
## This returns different numbers every time
## vectorize
set.seed(42)
## Setting the random number generator a given state
?set.seed
# c function stands for combining elements into a vector
w <- (90, 80, 70)
w <- c(90, 80, 70)
min(w)
max(w)
range(w)
diff(range(w))
# diff in this case actually calculates the range
mean(w)
median(w)
sum(w)
summary(q)
summary(w)
str(summary(w))
# you can call on str function for any function
# cor is correlation coefficient
cor(w, h)
cor(w, h)
h <- c(174, 170, 160)
cor(w, h)
lm(w ~ h)
?lm
# lm is fitting linear models, print coefficients like the intercept and the h
## let's see predicted w for someone 165cm
-146.154 + 165 * 1.346
fit <- lm(w ~ h)
# putting this into a variable
str(fit)
summary(fit)
# summary is a better function cause it works like stargazer
predict(fit, newdata = list(h = 165))
## it will do the calculation for us what we typed it manually
predict(fit, newdata = list(h = 52))
plot(h, w)
abline(fit, col = "red")
summary()
?abline
# Let's create out first Dataframe
df <- data.frame
# Let's create out first Dataframe
# weight = w is column values = column name
df <- data.frame(weight = w, height = h)
df
str(df)
# we use $ to refer to the column of the data frames
df$weight
# accessing the first element of the column
df$weight[1]
df[1,1]
df [2, 1]
nrow(df)
ncol(df)
dim(df)
plot(df)
cor(df)
h <- c(174, 170, 160)
w <- c(90, 80, 70)
df <- data.frame(weight = w, height = h)
plot(df)
cor(df)
## compute BMI
df
df$bmi <- df$weight / (df$height/100)^2
df
df <- read.csv("http://bit.ly/CEU-R-heights")
df
View(df)
df$bmi <- (df$WeightLb*0.4536) / (df$HeightIn*2.54)^2
df$bmi <- (df$weightLb*0.4536) / (df$heightIn*2.54)^2
df
df$bmi <- (df$weightLb*0.4536) / (df$heightIn*0.0254)^2
df
df$weight <- df$weightLb * 0.45
df$height <- df$heightIn * 2.54
df$weightLb <- df$heightIn <- NULL
df$bmi <- df$weight / (df$height/100) ^ 2
df
plot(df)
install.packages("pairsD3")
library(pairsD3)
# double :: means calling the functions of the package
pairsD3::pairsD3(df)
install.packages("GGally")
library(GGally)
ggpairs(df)
library(ggplot2)
ggplot(df, aes(x = height)) + geom_histogram()
ggplot(df, aes(x = height, y = weight)) + geom_point()
ggplot(df, aes(x = height, y = weight, color = sex)) + geom_point()
g <- ggplot(df, aes(x = height, y = weight, color = sex)) + geom_point()
g
system.time(g <- ggplot(df, aes(x = height, y = weight, color = sex)) + geom_point())
system.tinme(print(g))
system.time(print(g))
g + theme_bw()
ggplot(df, aes(x = height, y = weight)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm', se = FALSE, color = "black")
g + geom_smooth(method = 'lm', se = FALSE)
ggplot(df, aes(x = height, y = weight)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm', se = FALSE, color = "black")
g + geom_smooth(method = 'lm', se = TRUE)
ggplot(df, aes(x = height, y = weight)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm', se = FALSE, color = "black") +
geom_smooth(aes(color = sex), method = 'lm', se = FALSE)
g + theme_bw()
g + geom_smooth(method = 'lm', se = TRUE)
g
# Scale definitions
g + scale_y_log10()
# Themes and Standard Errors
# If we take the lm out --> creates a lowess
g + theme_bw()
# Scale definitions
g + scale_y_log10()
# Themes and Standard Errors
# If we take the lm out --> creates a lowess
g + theme_bw()
# Scale definitions
g + scale_y_log10()
# box plots
ggplot(df, aes(x = height)) + geom_boxplot()
ggplot(df, aes(sex,height)) + geom_boxplot()
# violin plot
ggplot(df, aes(sex,height)) + geom_violin()
# box plot on violin plot
ggplot(df, aes(sex,height)) +  geom_boxplot() + geom_violin()
ggplot(df, aes(sex,height)) +
geom_boxplot() +
geom_violin(alpha = .5) +
geom_jitter()
ggplot(df, aes(x = height, fill = sex)) + geom_density(alpha = .25)
ggplot(df, aes(x = height, fill = sex)) +
geom_density(alpha = .25) +
theme_bw() +
ggtitle("Heights of boys and girls") +
xlab("Height (cm)") + ylab("") +
theme(legend.oisition = "top")
ggplot(df, aes(x = height, fill = sex)) +
geom_density(alpha = .25) +
theme_bw() +
ggtitle("Heights of boys and girls") +
xlab("Height (cm)") + ylab("") +
theme(legend.position = "top")
# Themes
?theme
## TODO bar chart on the number of f/m
ggplot(df, aes(x = sex)) + geom_bar()
## TODO histogram of weight
ggplot(df, aes(x = weight)) + geom_bar()
## TODO histogram of weight
ggplot(df, aes(x = weight)) + geom_histogram()
## TODO histogram of weight split by sex
ggplot(df, aes(sex,weight)) + geom_histogram()
## TODO histogram of weight split by sex
ggplot(df, aes(x = weight, fill = sex)) + geom_histogram()
## TODO bar chart on the number of f/m
ggplot(df, aes(x = sex)) + geom_bar() +
theme_bw() +
ggtitle("Number of male and female") +
xlab("Frequency") + ylab("Gender") +
theme(legend.position = "top")
## TODO bar chart on the number of f/m
ggplot(df, aes(x = sex)) + geom_bar() +
theme_bw() +
ggtitle("Number of male and female") +
xlab("") + ylab("Frequency") +
theme(legend.position = "top")
## TODO histogram of weight
ggplot(df, aes(x = weight)) + geom_histogram() +
theme_bw() +
ggtitle("Histogram of weights") +
xlab("Weight") + ylab("") +
theme(legend.position = "top")
## TODO histogram of weight split by sex
ggplot(df, aes(x = weight, fill = sex)) + geom_histogram() +
theme_bw() +
ggtitle("Histogram of weight split by sex") +
xlab("Weight") + ylab("") +
theme(legend.position = "top")
## TODO histogram of weight split by sex
ggplot(df, aes(x = weight, fill = sex)) + geom_histogram() +
theme_bw() +
ggtitle("Histogram of weight split by sex") +
xlab("Weight") + ylab("") +
theme(legend.position = "top") +
facet_wrap()
## TODO histogram of weight split by sex
ggplot(df, aes(x = weight, fill = sex)) + geom_histogram() +
theme_bw() +
ggtitle("Histogram of weight split by sex") +
xlab("Weight") + ylab("") +
theme(legend.position = "top") +
facet_wrap(sex)
## TODO histogram of weight split by sex
# WE have to use the ~ for facet_wrap
ggplot(df, aes(x = weight)) + geom_histogram() + facet_wrap(~sex)
df
## TODO bar chart on the number of f/m below and above 160cm
df$height_cat <- df$height < 160
df
ggplot(df, aes(sex)) + geom_bar + facet_wrap(~height_cat)
ggplot(df, aes(sex)) + geom_bar() + facet_wrap(~height_cat)
## TODO bar chart on the number of f/m below and above 160cm
# Subtitles need to be changed within the DataFrame
# df$height_cat <- df$height < 160
# Creating 3 categories
df$height_cat <- cut(df$height, breaks = c(0, 160, Inf))
ggplot(df, aes(sex)) + geom_bar() + facet_wrap(~height_cat)
ggplot(df, aes(sex)) + geom_bar
ggplot(df, aes(sex, fill = height_cat)) + geom_bar
ggplot(df, aes(sex, fill = height_cat)) + geom_bar()
ggplot(df, aes(sex, fill = height_cat)) + geom_bar("fill")
ggplot(df, aes(sex, fill = height_cat)) + geom_bar(position = "fill")
# Stacked
ggplot(df, aes(sex, fill = height_cat)) + geom_bar(position = "dodge")
## TODO avg weight per gender
mean(df$weight)
?mean
#Grouping by manually
# we havr to insert the comma to look at all the columns
df[df$sex == "f", ]
#Grouping by manually
# we havr to insert the comma to look at all the columns
df[df$sex == "f", "weight"]
df[df$sex == "m", "weight"]
?aggregate
mean(df[df$sex == "f", "weight"])
meandf[df$sex == "m", "weight"])
mean(df[df$sex == "m", "weight"])
aggregate(weight ~ sex, FUN = mean, data = df)
?subset
subset(df, sex == "f")
install.packages("data.table")
library(data.table)
dt <- data.table(df)
dt
## dt[i]
dt[1]
dt[1:5]
dt[sex == "f"] # we don't need the $ prefix
dt[sex == "f"][1:5]
dt[ageYear < 12]
df[ageYear == min(ageYear)]
dt[ageYear < 12]
dt[ageYear == min(ageYear)]
# Ordering by bmi
dt[ageYear == min(ageYear)][order(bmi)]
str(dt[ageYear == min(ageYear)][order(bmi)])
dt[, summary(height)]
dt[, hist(height)]
dt[sex == "m", mean(height)]
dt[sex == "f", mean(height)]
# dt[i, j, by = ...]
dt[, mean(height), by = sex]
dt[, list(height = mean(height),
weight = mean(weight)
),
by = list(gender = sex, height_cat)]
dt[, list(elementary = ageYear < 14)]
dt
dt[, list(elementary = ageYear < 14)]
dt[, list((nonelementary = ageYear > 14) & (nonelementary = ageYear < 18)]
dt[, list(elementary = ageYear < 14)]
dt
dt$elementary <- df$ageYear < 14
max(ageYear)
dt[ageYear  < 18, median(weight), by = elementary]
?sample
?sample
sample(1:10, 2)
dt[sample(1:.N, 5)]
set.seed(100)
dt[sample(1:.N, 5)]
# Runif
runif(5)
runif(5, min = 1, max = 237)
round(runif(5, min = 1, max = 237))
dt[round(runif(5, min = 1, max = 237))]
dt[round(runif(5, min = 1, max = .N))]
?fread
booking <- fread("http://bit.ly/CEU-R-hotels-2018-prices")
booking
booking$below_100 <- df$price < 100
booking
booking$below_100 <- booking$price < 100
booking
sum(booking$below_100 == 'TRUE')
sum(booking$below_100 == 'TRUE' AND booking$offer == 0)
sum(booking$below_100 == 'TRUE' & booking$offer == 0)
avg(booking$below_100 == 'TRUE')
mean(booking$below_100 == 'TRUE')
mean(price)
mean(booking$price)
mean(booking$below_100 == "TRUE")
booking[price < 100]
booking[offer == 0][price < 100, .N]
booking[price < 100, mean(price)]
booking[weekend == 0, mean(price)]
booking[weekend == 1, mean(price)]
booking[weekend == 0, mean(price)]
booking
aggregate(nnights ~ holiday ~ year, FUN = mean, data = booking)
feature <- fread("http://bit.ly/CEU-R-hotels-2018-features")
booking[feature, on = .booking$hotel_id]
booking[price < 100, mean(price)]
booking[weekend == 0, mean(price)]
booking[weekend == 1, mean(price)]
booking[, mean(price), by = list(weekend, nnights)]
booking[, mean(price), by = list(weekend, nnights, holiday)]
feature <- fread("http://bit.ly/CEU-R-hotels-2018-features")
feature
?merge
feature[hotel_id == 2]
## dt[i, j , by = ]
# %in% can reference the other datasets values
# ! will convert all the TRUEs to FALSEs and vice versa
booking[!hotel_id %in% feature$hotel_id]
merge(booking, feature, all = TRUE)[hotel_id == 2]
dt[, mean(price), by = stars]
## TODO compute the average price per number of stars
dt <- merge(booking, feature, all = TRUE)[hotel_id == 2]
dt[, mean(price), by = stars]
## TODO compute the average price per number of stars
dt <- merge(booking, feature, all = TRUE)
dt[, mean(price), by = stars]
dt[, mean(price), by = stars][order(stars)]
# descending order is ~stars
dt[, mean(price), by = stars][order(~stars)]
# descending order
dt[, mean(price), by = stars][order(stars, decreasing = TRUE)]
savehistory("~/CEU-R-intro/1_r_history.Rhistory")
